#coding=gbk
'''
Created on Feb 27, 2014

@author: caiduo02@baidu.com
'''

import copy, string, json
import os,sys, os.path

from new_dsp_ad_branch_pb2 import ADBranch
from text_format import MessageToBranch


class AddBranch():
    '''
            生成一个广告及对广告的操作
    '''
    def __init__(self):   
        self.__protpbuf_obj__ = ADBranch()
    
    def AddValidAD(self):
        '''
        '''
        user = self.__protpbuf_obj__.dasuser.SmartAdd()
        
        
        plan = user.dasplan.SmartAdd()
        idea = user.dasidea.SmartAdd()
        crowd = user.dascrowd.SmartAdd()
        
        unit = plan.dasunit.SmartAdd()
        
        unitidea = unit.dasunitidea.SmartAdd()
        unitcyc = unit.dasunitcyc.SmartAdd()
        unitattribute = unit.dasunitattribute.SmartAdd()
        unitattributeexp = unit.dasunitattributeexp.SmartAdd()
        unitword = unit.dasunitword.SmartAdd()
        unitwordexp = unit.dasunitwordexp.SmartAdd()
        unitcrowd = unit.dasunitcrowd.SmartAdd()
        unitcrowdexp = unit.dasunitcrowdexp.SmartAdd()
        unitregion = unit.dasunitregion.SmartAdd()
        unitipexp = unit.dasunitipexp.SmartAdd()
        unitaudience = unit.dasunitaudience.SmartAdd()
        unitos = unit.adsunitos.SmartAdd()
        unitsite = unit.dasunitsite.SmartAdd()
        unitsiteexp = unit.dasunitsiteexp.SmartAdd()
        unittrade = unit.dasunittrade.SmartAdd()
        unitplace = unit.dasunitplace.SmartAdd()
        unitappexp = unit.dasunitappexp.SmartAdd()
        UpdateAD("unitidea",ideaid=self.__protpbuf_obj__.dasuser[0].dasidea[0].ideaid)
        
        self.filter_dict={}
#                     'DasUser'             :['eventid','optype'],
#                     'DasPlan'             :['eventid','optype'],
#                     'DasUnit'             :['eventid','optype'],
#                     'DasIdea'             :['eventid','optype'],
#                     'DasUnitIdea'            :['eventid','optype'],
#                     'DasCrowd'           :['eventid','optype'],
#                     'DasUnitCyc'           :['eventid','optype'],
#                     'DasUnitAttribute'   :['eventid','optype'],
#                     'DasUnitAttributeExp'       :['eventid','optype'],
#                     'DasUnitWord'    :['eventid','optype'],
#                     'DasUnitWordExp'         :['eventid','optype'],
#                     'DasUnitCrowd'        :['eventid','optype'],
#                     'DasUnitCrowdExp' :['eventid','optype'],
#                     'DasUnitRegion'           :['eventid','optype'],
#                     'DasUnitIPExp'             :['eventid','optype'],
#                     'DasUnitAudience'         :['eventid','optype'],
#                     'DasUnitOS'     :['eventid','optype'],
#                     'DasUnitSite'      :['eventid','optype'],
#                     'DasUnitSiteExp'      :['eventid','optype'],
#                     'DasUnitTrade'      :['eventid','optype'],
#                     'DasUnitPlace'      :['eventid','optype'],
#                     'DasUnitAppExp'      :['eventid','optype'],
#         }
        
    def __str__(self):
        return MessageToBranch(self.__protpbuf_obj__, '\t', 0, self.filter_dict)
    
    def UpdateAD(self,level_name,**attr_dict):
        '''
                        根据层级名字，修改广告该层属性
        '''
        if not attr_dict:
            return True
        
        if "user" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].%s = attr_dict[field_name]"%field_name
                    exec(exec_cmd)
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False

        elif "plan" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].%s = attr_dict[field_name]"%field_name
                    exec(exec_cmd)
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False  
        elif "idea" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasidea[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasidea[0].%s = attr_dict[field_name]"%field_name
                    exec(exec_cmd)
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False
        elif "crowd" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dascrowd[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dascrowd[0].%s = attr_dict[field_name]"%field_name
                    exec(exec_cmd)
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False
        elif "unit" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].%s = attr_dict[field_name]"%field_name
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False  
        elif "unitidea" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitidea[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitidea[0].%s = attr_dict[field_name]"%field_name
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False   
        elif "unitcyc " == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitcyc[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitcyc[0].%s = attr_dict[field_name]"%field_name
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False     
        elif "unitattribute" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitattribute[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitattribute[0].%s = attr_dict[field_name]"%field_name
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False  
        elif "unitattributeexp" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitattributeexp[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitattributeexp[0].%s = attr_dict[field_name]"%field_name
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False   
        elif "unitword" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitword[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitword[0].%s = attr_dict[field_name]"%field_name
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False    
        elif "unitwordexp" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitwordexp[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitwordexp[0].%s = attr_dict[field_name]"%field_name
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False  
        elif "unitcrowd" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitcrowd[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitcrowd[0].%s = attr_dict[field_name]"%field_name
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False    
        elif "unitcrowdexp" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitcrowdexp[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitcrowdexp[0].%s = attr_dict[field_name]"%field_name
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False   
        elif "unitregion" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitregion[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitregion[0].%s = attr_dict[field_name]"%field_name
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False  
        elif "unitipexp" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitipexp[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitipexp[0].%s = attr_dict[field_name]"%field_name
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False   
        elif "unitaudience" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitaudience[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitaudience[0].%s = attr_dict[field_name]"%field_name
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False 
        elif "unitos" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitos[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitos[0].%s = attr_dict[field_name]"%field_name
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False 
        elif "unitsite" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitsite[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitsite[0].%s = attr_dict[field_name]"%field_name
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False 
        elif "unitsiteexp" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitsiteexp[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitsiteexp[0].%s = attr_dict[field_name]"%field_name
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False 
        elif "unittrade" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunittrade[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunittrade[0].%s = attr_dict[field_name]"%field_name
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False 
        elif "unitplace" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitplace[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitplace[0].%s = attr_dict[field_name]"%field_name
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False 
        elif "unitappexp" == level_name:
            field_des_list = self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitappexp[0].DESCRIPTOR.fields
            for field_des in field_des_list:
                field_name = field_des.name
                if attr_dict.has_key(field_name):
                    #print "field Name: %s \nattr value: %s"%(field_name,attr_dict[field_name])
                   # field_des. __setattr__(field_des.name, attr_dict[field_des.name])
                    exec_cmd =  "self.__protpbuf_obj__.dasuser[0].dasplan[0].dasunit[0].dasunitappexp[0].%s = attr_dict[field_name]"%field_name
                    del attr_dict[field_name]
            if attr_dict:
                raise NameError,"Field name : %s does't exits" %attr_dict.keys()
                return False 
        else:
            raise NameError,"There is no such level : %s"%level_name
            return False

if __name__ == "__main__":
    ad = AddBranch();
    ad.AddValidAD()
    print ad
    #os.mknod("test.txt") 
    fp = open("test.txt",'w')
    fp.write(ad.__str__())
    fp.close() 
   # user2 = ad.__protpbuf_obj__.dasuser.SmartAdd()
   # user3 = ad.__protpbuf_obj__.dasuser.SmartAdd()
   # plan2 = ad.__protpbuf_obj__.dasuser[1].dasplan.SmartAdd()
   # ad.UpdateAD("plan",planvalidtimeslot="19871111000000-20140223235959",appdiscount=22)
   # print "After Update with planvalidtimeslot=\"19871111000000-20140223235959\",appdiscount=22"
   # print ad
    
    
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            